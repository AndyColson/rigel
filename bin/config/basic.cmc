// absolute value
define abs($v) {return ($v < 0 ? -$v : $v);}

// max of 2
define max($a,$b) {return ($a > $b ? $a : $b); }

// min of 2
define min($a,$b) {return ($a < $b ? $a : $b); }

// sign
define sign($x) {return ($x < 0 ? -1 : 1); }

// pause $n ms
define pause($n) {for ($0=$n+clock-10; clock<$0;);}

// print a variable in hex
define hex($v) {printf ("0x%02x\n", $v); }

// report basic current values:
define report()
{
	printf("%9d mpos:%8d mvel:%8d epos:%8d plim:%d nlim:%d home:%d\n", clock, mpos, mvel, epos,
			!!(ilevel & plimbit), !!(ilevel & nlimbit), !!(ilevel & homebit));
}

/* synchronous operation */
define sync()
{
	while(working) {continue;}
}


// use timeout?
// use evel (current encoder velocity)
define monitor()
{
	printf("start: mpos=%d,mvel,epos,evel,mtpos=%d\n", mpos,mtpos);
	pause(500);  // let it get going
	while(working)
	{
		printf("%8d,%8d,%8d,%8d\n", mpos, mvel, epos, evel);
		if (working && (0 == evel))
		{
			// we didnt move!
			mtpos = mpos;			// stop trying
			printf("error: we got stuck\n");
			sync();
			return;
		}
		pause(500);  // half a second, I hope
	}
	printf("done: %8d,%8d,%8d,%8d\n", mpos, mvel, epos, evel);
}
